;
;  Copyright 2011 by Texas Instruments Incorporated.
;  @(#) DSP/BIOS_Kernel 5,2,5,34 01-20-2011 (cuda-u34)
;
;
;  ======== swi.h55 ========
;

        .if ($isdefed("SWI_") = 0)  ; prevent multiple includes of this file
SWI_    .set    1

        .include chk.h55
        .include cinit.h55
        .include fxn.h55
        .include gbl.h55
        .include hwi.h55
        .include sts.h55
        .mmregs

isSwiAligned  .set  LONGALIGN           ; SWI object has FXN object. Fxn
                                        ; object has codePtr which always
                                        ; requires aligment, hence SWI object
                                        ; always requires alignment.
 
;
;  ======== SWI_Obj ========
;
SWI_Obj         .struct
lockflag        Int             1       ; not posted: -1, posted: 0
ready           DataPtr         1       ; this points to rdy list
mask            Int             1       ; priority bit-mask
link            DataPtr         1       ; to next element in rdy list.
                                        ; NULL(0) means END
initkey         Int             1       ; the initial value for the mailbox
mailbox         Int             1       ; the swi's mailbox
pad0            .align          isFxnAligned
fxnobj          .tag         FXN_Obj    ; the function (and its args) to execute
stslock         Int             1       ; equals 0 <=> STS_set/delta "in progress"
sts             DataPtr         1       ; pointer to STS_Obj
endpad          .align          isSwiAligned 
                                        ; Even the length in case
                                        ; of large model.
SWI_A_OBJSIZE   .endstruct

SWI_BASE        .set    SWI_Obj.lockflag

SWI_O_LOCK      .set    SWI_Obj.lockflag-SWI_BASE
SWI_O_READY     .set    SWI_Obj.ready-SWI_BASE
SWI_O_MASK      .set    SWI_Obj.mask-SWI_BASE
SWI_O_LINK      .set    SWI_Obj.link-SWI_BASE
SWI_O_INITKEY   .set    SWI_Obj.initkey-SWI_BASE
SWI_O_MAILBOX   .set    SWI_Obj.mailbox-SWI_BASE
SWI_O_FXNOBJ    .set    SWI_Obj.fxnobj-SWI_BASE
SWI_O_STSLOCK   .set    SWI_Obj.stslock-SWI_BASE
SWI_O_STS       .set    SWI_Obj.sts-SWI_BASE

CINIT_SWI_O_MAILBOX     .set    SWI_O_FXNOBJ
CINIT_SWI_O_STS         .set    SWI_A_OBJSIZE - SWI_O_STSLOCK


        .mmregs

        .global SWI_D_curmask, SWI_D_curset, SWI_D_curfxn
        .global SWI_D_lock, SWI_D_execaddr, SWI_D_rdytab, SWI_D_rdybeg
        .global SWI_D_inswi
        .global SWI_D_runaddr
        .global SWI_D_curmbox
        .global SWI_F_enable, SWI_F_exec, SWI_F_exec_sync, SWI_F_post
        .global SWI_F_restorepri, SWI_F_run, SWI_D_entrytype

        ; symbols that also need to be accessed from C.
        .global _SWI_D_curmask, _SWI_D_lock
        .global _SWI_D_inswi
        .global _SWI_D_rdytab

                                ; These two variables  indicate how
                                ; was the scheduler entered, ie from
                                ;  SWI_post or from  HWI_exit

        ; needs to be .ref to force these symbols to be defined for VBD
        .ref SWI_A_TABBEG, SWI_A_TABEND, SWI_A_TABLEN

        

;
;# ======== SWI_Obj ========
;
;#
;# Preconditions:
;#      none
;#
;# Postconditions:
;#      none
;#
;
        .asg    ":FXN_Obj$regs:,:STS_Obj$regs:", SWI_Obj$regs
SWI_Obj .macro cflag, name, id, fxn, pri, mailbox, arg0, arg1, dorta, order, filter, maxformat, sumformat, avgformat, filtmaxmult, filtsummult, unittype
        CHK_nargs "SWI_Obj", fxn
        .if ($symcmp(":CHK_status:", "error") = 0)
            .mexit
        .endif

        ;
        ; pri, mailbox, arg0 and arg1 are optional -- defaults if necessary
        ;
        .if ($symlen(":pri:") = 0)
            .asg        "0", pri
            .asg        "0", mailbox
            .asg        "0", arg0
            .asg        "0", arg1
            .asg        "0", dorta 
        .elseif ($symlen(":mailbox:") = 0)
            .asg        "0", mailbox
            .asg        "0", arg0
            .asg        "0", arg1
            .asg        "0", dorta 
        .elseif ($symlen(":arg0:") = 0)
            .asg        "0", arg0
            .asg        "0", arg1
            .asg        "0", dorta 
        .elseif ($symlen(":arg1:") = 0)
            .asg        "0", arg1
            .asg        "0", dorta 
        .elseif ($symlen(":dorta:") = 0)
            .asg        "0", arg1
        .else
            CHK_nargs "SWI_Obj", arg1
            .if ($symcmp(":CHK_status:", "error") = 0)
                .mexit
            .endif
        .endif

        .if (:cflag: = 0)
            .mexit
        .endif

        .global :name:, fxn

        .global :name:$swi      ; generate symbol for vbd/rta
:name:$swi .set 0
        .global :name:$dorta    ; generate dorta symbol for vbd/rta
:name:$dorta .set :dorta:
        .global :name:$pri      ; generate priority symbol for vbd/rta
:name:$pri .set :pri:
        .global :name:$ord      ; generate order symbol for vbd/rta
:name:$ord .set :order:

:name:  .tag    SWI_Obj

        C55_allocateObject isSwiAligned, :name:, SWI_A_OBJSIZE, .swi    
:name:$fxn      .set  :name: + SWI_O_FXNOBJ
        C55_cinitHeader CINITALIGN, isSwiAligned, :name: , SWI_A_OBJSIZE, DATAPAGE 
        C55_cinitBegin isSwiAligned
        C55_cinitInt  -1                        ; lockflag (not posted)
        C55_cinitDataPtr  SWI_D_rdytab+(:pri:*2+1)*DATAPTRSIZE
                                                ; ready
        C55_cinitInt     1 << :pri:             ; mask
        C55_cinitDataPtr  0                     ; link
        C55_cinitInt    :mailbox:               ; initkey
        C55_cinitInt    :mailbox:               ; mailbox
        FXN_cinitObj   :fxn:, :arg0:, :arg1:
        C55_cinitInt  -1                        ; stslock
        .if :dorta:
                C55_cinitDataPtr   :name:$sts
        .else
                C55_cinitDataPtr   0
        .endif
        C55_cinitEnd isSwiAligned

        ; only allocate STS object if 'Do RTA' is TRUE
        .if :dorta:
            .global :name:$sts$filtsummult      ; generate symbol for sum mult
:name:$sts$filtsummult .set     :filtsummult:
            .global :name:$sts$filtmaxmult      ; generate symbol for max mult
:name:$sts$filtmaxmult .set     :filtmaxmult:

            STS_Obj 1, :name:$sts, 0, :filter:, ":maxformat:", ":sumformat:", ":avgformat:", -1, :unittype:, -1, -1, -1, 0, 0
        .endif

        .endm

;
;# ======== SWI_andn ========
;
;#
;# Preconditions:
;#      xar0  = address of the SWI object
;#      t0 = mask
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      intm must be 0, unless this macro is invoked from an interrupt context.
;#
;  Algorithm in pseudo-C:
;  SWI_andn(SWI_Obj *swi, Uns mask)
;  {
;       if(swi->mailbox != 0){
;               {
;               begin atomic
;               swi->mailbox = swi->mailbox & ~mask
;               end atomic  
;               if(swi->mailbox == 0){
;                SWI_F_post()
;           }
;       }
;  }

        .asg    "tc1,tc2,t0,t1:SWI_F_post$regs:", SWI_andn$regs
SWI_andn        .macro dummy
        CHK_void SWI_andn, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                .if (_55Pb_)
                    mov ac0.l, t0       ; as per Ryujin calling conventions
                .endif
                cmp *+ar0(#SWI_O_MAILBOX) == 0, tc2     ; ar0 -> mail box 
                bcc end?, tc2                           ; if mailbox = 0  exit
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ;Moved below as part of intr(#31) workaround removal
                ;not t0                                 ; mask = ~mask
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                .noremark 5650                          ; Safe wrt CPU_68
                                                        ; Switch remark off.
                btst #11, ST1_55_MMR, tc1
                .remark 5650                            ; Switch remark on.
                bset #STBIT_INTM, st1_55                ; Start Atomic
                 
                                                        ; Moved code here
                not t0                                  ; mask = ~mask

                nop                                     ; 5 nop used 
                nop
                nop
                nop
                nop
                                                ; refer to log.s55 for intr
                                                ; workaround removal details.  


                and *ar0, t0, t0                        ; mask = mask & mbox
                mov t0, *ar0                            ; update the mbox value 
                .noremark 5503,5505                     ; Safe wrt CPU_84
                                                        ; Switch remark off
                xcc cond?, !tc1                   
                        bclr #STBIT_INTM, st1_55                ; End Atomic
                .remark 5503,5505                       ; Switch remark on.
cond?           add #-SWI_O_MAILBOX, ar0, ar0           ; ar0 -> SWI
                callcc SWI_F_post, t0 == #0             ; if (mbox = 0) 
        .else
                .if (_55Pb_)
                    t0 = ac0.l          ; as per Ryujin calling conventions
                .endif
                tc2 = (*+ar0(#SWI_O_MAILBOX) ==  #0)    ; ar0 -> mail box 
                if (tc2) goto end?                      ; if mailbox = 0  exit
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ;Moved below as part of intr(#31) workaround removal
                ;t0 = ~t0                               ; mask = ~mask
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                .noremark 5650                          ; Safe wrt CPU_68
                                                        ; Switch remark off.
                tc1 = bit(ST1_55_MMR,#STBIT_INTM)|| mmap() 
                .remark 5650                            ; Switch remark on.
                bit(st1,#STBIT_INTM) = #1               ; Start Atomic
                        
                                                        ; Moved code here
                t0 = ~t0                                ; mask = ~mask
                nop                                     ; 5 nop used  
                nop
                nop
                nop
                nop
                                                ; refer to log.s55 for 
                                                ; workaround removal details.  


                t0 = t0 & *ar0                          ; mask = mask & mbox
                *ar0 = t0                               ; update the mbox value 
                .noremark 5503, 5505                    ; Safe wrt CPU_84.
                                                        ; Switch remark off.
                if (!tc1) execute (AD_UNIT)               
                        bit(st1, #STBIT_INTM) = #0      ; End Atomic
                .remark 5503,5505                       ; Switch remark on.
                ar0 = ar0 - #SWI_O_MAILBOX              ; ar0 -> SWI
                if (t0 == #0) call SWI_F_post           ; if (mbox = 0) 
                                                        ; post the SWI.
        .endif

end?:
        .endm

;
;# ======== SWI_busy ========
;
;  Atomic test of SWI_D_lock >= 0
;
;#
;#  Preconditions:
;#
;#  Postconditions:
;#      t0 = 1 if SWI_D_lock >= 0   Scheduler is  locked
;#      t0  = 0 if SWI_D_lock < 0   Scheduler is not locked
;#
;
;  Algorithm in pseudo-C:
;  start atomic {
;      if (SWI is locked) {
;          return (1)
;      }
;      else {
;          return (0)
;      }
;  } end atomic

        .asg "tc1,t0,t1", SWI_busy$regs
SWI_busy .macro dummy
        CHK_void SWI_busy, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                btst #11, ST1_55_MMR, tc1       ; PARALLEL REMOVED 
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ;Moved below as part of intr(#31) workaround removal
                ;mov #0, t0                             ; Set up the default
                ;                                       ; return value to
                ;                                       ; be unlocked.
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                .noremark 5650                          ; Safe wrt CPU_68
                                                        ; Switch remark off.
                bset #STBIT_INTM, st1_55                        ; Start Atomic
                 
                .remark 5650                            ; Switch remark on.
                                                        ; Moved here
                .if (_55Pb_)
                    mov #0, ac0.l
                .else
                    mov #0, t0                          ; Set up the default
                .endif                                  ; return value to
                                                        ; be unlocked.

                nop                                     ; 5 nop used  
                nop     
                nop
                nop
                nop
                                                ; refer to log.s55 for 
                                                ; workaround removal details.  


                mov *(#SWI_D_lock), t1                  ; Get the lock value
                bcc end?, t1 < #0                       ; if ( lock < 0 )
                    .if (_55Pb_)
                        mov #1, ac0.l
                    .else       
                        mov #1, t0                      ; SWI is locked, 
                    .endif                              ; return 1 in t0
        .else
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ;Moved below as part of intr(#31) workaround removal
                ;t0 =  #0                                ; Set up the default
                ;                                        ; return value to
                ;                                        ; be unlocked.
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                .noremark 5650                          ; Safe wrt CPU_68
                                                        ; Switch remark off.
                tc1 = bit(ST1_55_MMR,#STBIT_INTM)|| mmap(); PARALLEL REMOVED 
                .remark 5650                            ; Switch remark on.
                bit(st1,#STBIT_INTM) = #1               ; Start Atomic  
                 
                .if (_55Pb_)                            ; Moved code here
                    ac0.l =  #0                         ; Set up the default
                .else                                   ; return value to
                    t0 = #0                             ; be unlocked.
                .endif
                nop                                     ; 5 nop used  
                nop
                nop
                nop
                nop
                                                ; refer to log.s55 for 
                                                ; workaround removal details.  


                t1 = *(#SWI_D_lock)                     ; Get the lock value
                if (t1 < #0) goto end?                  ; if ( lock < 0 )
                .if (_55Pb_)
                    ac0.l = #1
                .else
                    t0 = #1                     ; SWI is locked, 
                .endif
                                                        ; return 1 in t0
        .endif
                .noremark 5650                          ; Safe wrt CPU_68

end?:                                           
                                                        ; Switch remark off.
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                xcc exitOut?, !tc1                
                        bclr #STBIT_INTM, st1_55                ; End atomic
exitOut?:
        .else
                if (!tc1) execute (AD_UNIT)               
                        bit(st1, #STBIT_INTM) = #0      ; End atomic
        .endif
                .remark 5650                            ; Switch remark on.
        .endm

;
;# ======== SWI_config ========
;
;#
;# Preconditions:
;#      none
;#
;# Postconditions:
;#      none
; #
        .asg    "", SWI_config$regs
SWI_config      .macro _ehook, _ihook
        .endm

;
;# ======== SWI_dec ========
;
;#
;# Preconditions:
;#      xar0 = address of the SWI object
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      intm must be 0, unless this macro is invoked from an interrupt context.
;#
;
;  Algorithm in pseudo-C:
;  SWI_dec(SWI_Obj *swi)
;  {
;      if(swi->mailbox != 0){
;          {
;           swi->mailbox--
;           if(swi->mailbox == 0)        SWI_F_post()
;          }
;
;  }

        .asg    "tc1,:SWI_F_post$regs:", SWI_dec$regs
SWI_dec         .macro dummy
        CHK_void SWI_dec, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                cmp *+ar0(#SWI_O_MAILBOX) == 0, tc1     ; get mbox value
                bcc end?, tc1                           ; if already posted exit
                .noremark 5571                          ; Safe wrt CPU_41
                                                        ; Switch remark off.
                add #-1, *ar0                           ; if not posted 
                                                        ; decrement 
                                                        ; the mbox value
                .remark 5571                            ; Safe wrt CPU_41.
                cmp *ar0 ==0, tc1                       ; if mbox == 0
                sub #SWI_O_MAILBOX, ar0, ar0
                callcc SWI_F_post, tc1                  ; post the SWI.
        .else
                tc1 = (*+ar0(#SWI_O_MAILBOX) == #0)     ; get mbox value
                if (tc1)  goto end?                     ; if already posted exit
                .noremark 5571                          ; Safe wrt CPU_41
                                                        ; Switch remark off.
                *ar0 = *ar0 - #1                        ; if not posted 
                                                        ; decrement 
                                                        ; the mbox value
                .remark 5571                            ; Switch remark on.
                tc1 = (*ar0 == #0)                      ; if mbox == 0
                ar0 = ar0 - #SWI_O_MAILBOX              ; ar0 -> SWI
                if (tc1) call SWI_F_post                ; post the SWI.
        .endif

end?:
        .endm

;
;# ======== SWI_disable ========
;
;#
;# Preconditions:
;#      intm = 0 (interrupts must be enabled)
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      The calls to HWI_enter and HWI_exit required at the beginning
;#      and end of a hardware ISR automatically disable and reenable
;#      swi handling. SWI_disable or SWI_enable should not be called
;#      within a hardware ISR.
;#
;
;  Algoritm:
;       atomic {
;           SWI_D_lock++
;       }

        .asg    "", SWI_disable$regs
SWI_disable     .macro dummy
        CHK_void SWI_disable, dummy
        .noremark 5571  ; Safe wrt CPU_41
                        ; Switch remark off.
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                add #1, *(#SWI_D_lock) 
        .else
                *(#SWI_D_lock) = *(#SWI_D_lock) + #1 
        .endif
        .remark 5571    ; Switch remark on.
        .endm


;
;# ======== SWI_enable ========
;
;#
;# Preconditions:
;#      SWI_D_lock >= 0 (this means SWI execution is disabled, i.e. "locked")
;#      intm = 0 (interrupts must be enabled)
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      The calls to HWI_enter and HWI_exit required at the beginning
;#      and end of a hardware ISR automatically disable and reenable
;#      swi handling. SWI_disable or SWI_enable should not be called
;#      within a hardware ISR.
;#

        .asg    ":SWI_F_enable$regs:", SWI_enable$regs
SWI_enable      .macro 
         call SWI_F_enable      ; configured.
        .endm


;
;# ======== SWI_end ========
;  Invoked at the end of all other configuration
;  declarations.
;
;#
;# Preconditions:
;#      none
;#
;# Postconditions:
;#      none
;#
        .asg    "", SWI_end$regs
SWI_end .macro
        .endm

;
;# ======== SWI_getpri ========
;
;#
;# Preconditions:
;#      xar0 = address of the SWI object
;#
;# Postconditions:
;#      t0/ac0.l = priority mask of the SWI object for 55x/56x
;#
        .asg "t0", SWI_getpri$regs
SWI_getpri      .macro dummy
        CHK_void SWI_getpri, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
            .if (_55Pb_)
                mov *ar0(#SWI_O_MASK), ac0.l 
            .else
                mov *ar0(#SWI_O_MASK), t0
            .endif
        .else
            .if (_55Pb_)
                ac0.l = *ar0(#SWI_O_MASK) 
            .else
                t0 = *ar0(#SWI_O_MASK) 
            .endif
        .endif
        .endm

;
;# ======== SWI_inc ========
;
;#
;# Preconditions:
;#      xar0 = address of the SWI object
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      intm must be 0, unless this macro is invoked from an interrupt context.
;#
;  Algorithm in pseudo-C:
;  SWI_inc(SWI_Obj *swi)
;  {
;           swi->mailbox++
;         SWI_F_post()
;  }

        .asg    ":SWI_F_post$regs:", SWI_inc$regs
SWI_inc         .macro dummy
        CHK_void SWI_inc, dummy
        .noremark 5571  ; Safe wrt CPU_41
                        ; Switch remark off
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                add #1, *ar0(#SWI_O_MAILBOX)
        .else
                *ar0(#SWI_O_MAILBOX) = *ar0(#SWI_O_MAILBOX)  + #1 
        .endif
        .remark 5571    ; Switch remark on.
        call SWI_F_post
        .endm

;
;# ======== SWI_init ========
;  Runtime initialization for SWI
;
;#
;# Preconditions:
;#      none
;#
;# Postconditions:
;#      none
;#
;# Dependencies:
;#      none
;#

        .asg    "", SWI_init$regs
SWI_init        .macro
        .endm

;
;# ======== SWI_or ========
;
;#
;# Preconditions:
;#      xar0 = address of the SWI object
;#      t0/ac0.l = mask for 55x/56x
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      intm must be 0, unless this macro is invoked from an interrupt context.
;#
;  Algorithm in pseudo-C:
;  SWI_or(SWI_Obj *swi, Uns mask)
;  {
;        Begin  atomic {
;           swi->mailbox = swi->mailbox | mask
;         }
;       End  atomic
;         SWI_F_post()
;  }

        .asg    "ar1,t0:SWI_F_post$regs:", SWI_or$regs
SWI_or          .macro dummy
        CHK_void SWI_or, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                .if (_55Pb_)
                    mov ac0.l, t0
                .endif
                .noremark 5650                          ; Safe wrt CPU_68
                                                        ; Switch remark off.
                btst #11, ST1_55_MMR, tc1 
                .remark 5650                            ; Switch remark on.
                HWI_disable
                or *ar0(#SWI_O_MAILBOX), t0, t0         ; mask = mask | mbox
                mov t0, *ar0(#SWI_O_MAILBOX)            ; mbox = mask
                .noremark 5503,5505                     ; Safe wrt CPU_84
                                                        ; Switch remark off.
                xcc cond?, !tc1
                    HWI_enable                          ; End atomic    
                .remark 5503,5505                       ; Switch remark on.
cond?
        .else
                .if (_55Pb_)
                     t0 = ac0.l
                .endif
                .noremark 5650                          ; Safe wrt CPU_68
                                                        ; Switch remark off.
                tc1 = bit(ST1_55_MMR,#STBIT_INTM)|| mmap()
                .remark 5650                            ; Switch remark on.
                HWI_disable
                t0 = t0 | *ar0(#SWI_O_MAILBOX)          ; mask = mask | mbox
                *ar0(#SWI_O_MAILBOX) = t0               ; mbox = mask
                .noremark 5503,5505                     ; Safe wrt CPU_84
                                                        ; Switch remark off.
                if (!tc1) execute (AD_UNIT)               
                    HWI_enable                          ; End atomic    
                .remark 5503,5505                       ; Switch remark on.
        .endif
        call  SWI_F_post  
 .endm

;
;# ======== SWI_post ========
;
;#
;# Preconditions:
;#      xar0 = address of the SWI object
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      Whenever this Macro (API) is not invoked from the interrupt context
;#      such as an Interrupt Service Routine, intm = 0 must be ensured
;#      as a precondition too.
;#

        .asg    ":SWI_F_post$regs:", SWI_post$regs
SWI_post        .macro  dummy
        CHK_void SWI_post,  dummy
        call SWI_F_post 
        .endm

;
;# ======== SWI_raisepri ========
;
;#
;# Preconditions:
;#      t0 =  mask of desired priority
;#
;# Postconditions:
;#      t0 = old priority mask 
;#
;

        .asg    "ac0_g, ac0_h,ac0_l,t0,t1 ", SWI_raisepri$regs
;  Algorithm in pseudo-C:
; Int  SWI_raisepri(Int mask)
;  {
;       mask = mask << 1 ;
;       msbThatisOne =  getLeadingMsbThatisOne(mask) ;
;       newCurMask =  1 << msbThatisOne ; 
;       oldCurMask = SWI_D_curmask      ;
;       SWI_D_curmask = max( SWI_D_curmask, newCurMask) ; 
;       return oldCurMask
;  }

SWI_raisepri    .macro   mask
        CHK_void SWI_raisepri, mask
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                .if (_55Pb_)
                    mov ac0.l, t0
                .endif
                sfts t0, #1                             ; mask = mask << 1 
                mov uns(T0_MMR), ac1                    ; get the unsigned value
                                                        ; of mask in ac0.
                .noremark 5584                          ; Safe wrt CPU_47
                                                        ; Switch remark off.
                exp ac1, t1                             ; find out the MSB that
                .remark 5584                            ; Switch remark on.
                add #-30, t1                            ; is 1 in ac0
                abs t1, t1                              ; PARALLEL REMOVED 
                mov #1, ac1                             ; setup seed in ac0
                .noremark 5673                          ; Safe wrt CPU_89
                                                        ; Switch remark off
                sfts ac1, t1, ac1                       ; Peform 1 << mask
                .remark 5673                            ; Switch remark on.
                .if (_55Pb_)
                    mov *(#SWI_D_curmask), ac0.l        ; ac0.l = SWI_D_curmask
                    max ac0.l, ac1
                .else
                    mov *(#SWI_D_curmask), t0           ; t0 = SWI_D_curmask
                    max t0, ac1                         ; find the max
                .endif
                mov ac1, *(#SWI_D_curmask)              ; curmask = max
                                                        ; value
        .else
                .if (_55Pb_)
                    t0 = ac0.l
                .endif
                t0 = t0 << #1                           ; mask = mask << 1 
                ac1 = uns(T0_MMR) || mmap()             ; get the unsigned value
                                                        ; of mask in ac0.
                .noremark 5584                          ; Safe wrt CPU_47
                                                        ; Switch remark off.
                t1 = exp(ac1)                           ; find out the MSB that
                .remark 5584                            ; Switch remark on.
                t1 = t1 - #30                           ; is 1 in ac0
                t1 = |t1|                               ; PARALLEL REMOVED 
                ac1 = #1                                ; setup seed in ac0
                .noremark 5673                          ; Safe wrt CPU_89
                                                        ; Switch remark off
                ac1 = ac1 << t1                         ; Peform 1 << mask
                .remark 5673                            ; Switch remark on.
                .if (_55Pb_)
                    ac0.l = *(#SWI_D_curmask)           ; ac0.l = SWI_D_curmask
                    ac1 = max(ac0.l, ac1)
                .else
                    t0 = *(#SWI_D_curmask)              ; t0 = SWI_D_curmask
                    ac1 = max(t0, ac1)                  ; find the max
                .endif
                *(#SWI_D_curmask) = ac1                 ; curmask = max
        .endif
        .endm

;
;# ======== SWI_restorepri ========
;
;#
;# Preconditions:
;#      ac0 = old priority mask 
;#      intm = 0 
;#      SWI_D_lock < 0
;#      not in an ISR
;#
;# Postconditions:
;#      none
;#
;# Constraints and Calling Environment:
;#      This macro must not be invoked from an ISR

        .asg    ":SWI_F_restorepri$regs:", SWI_restorepri$regs
SWI_restorepri  .macro
        call SWI_F_restorepri

        
        
        .endm

;
;# ======== SWI_getmbox ========
;
;  SWI_getmbox - get mailbox value for current swi
;
;#
;# Preconditions:
;#
;# Postconditions:
;#      t0 = SWI_D_curmbox (current swi's mailbox value)
;#
;
        .asg    "t0", SWI_getmbox$regs
SWI_getmbox     .macro  dummy
        CHK_void SWI_getmbox, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
            .if (_55Pb_)
                mov *(#SWI_D_curmbox), ac0.l
            .else
                mov *(#SWI_D_curmbox), t0
            .endif
        .else
            .if (_55Pb_)
                ac0.l = *(#SWI_D_curmbox)
            .else
                t0 = *(#SWI_D_curmbox)
            .endif
        .endif

        .endm

;
;# ======== SWI_self ========
;
;#
;# Preconditions:
;#
;# Postconditions:
;#      xar0  = address of current swi = SWI_D_curfxn - SWI_O_FXNOBJ 
;#
;
;       This macro should be called only when current swi exists.
;
        .asg    "xar0" , SWI_self$regs
SWI_self        .macro dummy
        CHK_void SWI_self, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                .if  (_55L_) | (_55H_)  
                        mov dbl(*(#SWI_D_curfxn)), xar0    
                .else
                        mov *abs16(#SWI_D_curfxn), ar0    
                .endif
                add  #(SWI_O_LOCK - SWI_O_FXNOBJ), ar0; back up ar0 to
                                                ; point to SWI object
        .else
        .if  (_55L_) | (_55H_)
                        xar0 = dbl(*(#SWI_D_curfxn))    
                .else
                        ar0 = *abs16(#SWI_D_curfxn)    
                .endif
                ar0 = ar0 + #(SWI_O_LOCK - SWI_O_FXNOBJ); back up ar0 to
                                                ; point to SWI object
        .endif

        .endm

;
;# ======== SWI_startup ========
;
;#
;#  Preconditions:
;#      SWI_D_lock = 0
;#
;#  Postconditions:
;#      none
;#
;#  Dependencies:
;#      Must follow HWI_startup as intm = 0 is a precondition to
;#      SWI_startup and interrupts must be enabled before software interrupts
;#      are allowed to run.
;
        .asg    "SWI_enable$regs:", SWI_startup$regs
SWI_startup       .macro dummy
        CHK_void SWI_startup, dummy
        ;
        ; only expand if the SWI module is configured
        .if(SWI$ == 1)                          ; Only if SWIs exist, enable
                SWI_enable 
        .endif
        .endm

;
;# ======== SWI_unlocked ========
;
;  Atomic test of SWI_D_lock < 0
;
;#
;#  Preconditions:
;#      none
;#
;#  Postconditions:
;#      t0  = 1 if SWI_D_lock < 0  SWI is unlocked
;#      t0  = 0 if SWI_D_lock >= 0  SWI is locked
;#
;
;  Algorithm in pseudo-C:
;  start atomic {
;      if (SWI is unlocked) {
;          return (1)
;      }
;      else {
;          return (0)
;      }
;  } end atomic
;
        .asg "t0,t1,tc1", SWI_unlocked$regs
SWI_unlocked .macro dummy
        CHK_void SWI_unlocked, dummy
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                btst #11, ST1_55_MMR, tc1 
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ;Moved below as part of intr(#31) workaround removal
                ;mov #0, t0                             ; PARALLEL REMOVED
                ;                                       ; Assume SWI is locked
                ;                                       ; and make t0 = 0.
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                bset #STBIT_INTM, st1_55                ; Start Atomic
                 
                .if (_55Pb_)                            ; Moved code here
                    mov #0, ac0.l                       ; PARALLEL REMOVED
                .else
                    mov #0, t0                          ; Assume SWI is locked
                .endif                                  ; and make t0 = 0.
                nop                                     ; 5 nop used  
                nop
                nop
                nop
                nop
                                                ; refer to log.s55 for 
                                                ; workaround removal details.  


                mov *(#SWI_D_lock), t1          
                bcc end?, t1 >= #0                      ; if (SWI is unlocked)
                    .if (_55Pb_)
                        mov #1, ac0.l                   ; return 1.
                    .else
                        mov #1, t0                      ; return 1.
                    .endif
        .else
                tc1 = bit(ST1_55_MMR,#STBIT_INTM)|| mmap() 
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
                ;Moved below as part of intr(#31) workaround removal
                ;t0 = #0                                ; PARALLEL REMOVED
                ;                                       ; Assume SWI is locked
                ;                                       ; and make t0 = 0.
                ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

                bit(st1,#STBIT_INTM) = #1               ; Start Atomic
                 
                .if (_55Pb_)                            ; Moved code here
                    ac0.l = #0                             ; PARALLEL REMOVED
                .else
                    t0 = #0                             ; Assume SWI is locked
                .endif
                                                        ; and make t0 = 0.
                nop                                     ; 5 nop used  
                nop
                nop
                nop
                nop
                                                ; refer to log.s55 for 
                                                ; workaround removal details.  


                t1 = *(#SWI_D_lock)             
                if (t1 >= #0)  goto  end?               ; if (SWI is unlocked)
                    .if (_55Pb_)
                        ac0.l = #1                              ; return 1.
                    .else
                        t0 = #1                         ; return 1.
                    .endif
        .endif  
end?:
        .if(.MNEMONIC)  ; if ; MNEMONIC ; assembler
                xcc exitOut?, !tc1                
                        bclr #STBIT_INTM, st1_55                ; End Atomic
exitOut?:
        .else
                if (!tc1) execute (AD_UNIT)               
                        bit(st1, #STBIT_INTM) = #0      ; End Atomic
        .endif
        .endm

        .endif          ; ($isdefed("SWI_") = 0)
